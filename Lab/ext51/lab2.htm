<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title></title>

    <!--ExtJs框架开始-->
    <link rel="stylesheet" type="text/css" href="/Ext5/theme/neptune/ext-theme-neptune-all-debug.css" />
    <link rel="stylesheet" type="text/css" href="/Ext5/css/ClearButton.css" />
    <script type="text/javascript" src="/Ext5/ext-all-debug.js"></script>
    <script type="text/javascript" src="/Ext5/ux/ClearButton.js"></script>
    <script type="text/javascript" src="/Ext5/ext-theme-neptune-debug.js"></script>
    <script type="text/javascript" src="/Ext5/ext-locale-zh_CN-debug.js"></script>

   <style type="text/css">
   </style>
    <script type="text/javascript">
        Ext.onReady(function(){

            Ext.create('Ext.data.Store', {
                storeId: 'simpsonsStore',
                fields:[ 'name', 'email', 'phone'],
                data: [
                    { name: 'Lisa', email: 'lisa@simpsons.com', phone: '555-111-1224' },
                    { name: 'Bart', email: 'bart@simpsons.com', phone: '555-222-1234' },
                    { name: 'Homer', email: 'homer@simpsons.com', phone: '555-222-1244' },
                    { name: 'Marge', email: 'marge@simpsons.com', phone: '555-222-1254' }
                ]
            });

            Ext.create('Ext.grid.Panel', {
                title: 'Simpsons',
                store: Ext.data.StoreManager.lookup('simpsonsStore'),
                columns: [
                    { text: 'Name', dataIndex: 'name' },
                    { text: 'Email', dataIndex: 'email', flex: 1 },
                    { text: 'Phone', dataIndex: 'phone' }
                ],
                height: 200,
                width: 400,
                renderTo: Ext.getBody(),
                fbar : ['->',	
                    {
                    xtype : "button",
                    text : "显示包含表格的窗口",
                    disabled : false,
                    handler : function(src) {
                        var win = Ext.getCmp('gridWin');
                        if(win.hidden){
                            win.show();
                        }
                    },
                    }
                ]
            });

            function refreshRowColor(json, view) {
                var len = json["end"] - json["start"] + 1;
                for (var i = 0; i < len; i++) {
                    var rowData = json.rows[i];
                    var rowIndex = rowData["rowIndex"];
                    var rowColor = rowData["rowColor"];
                    if (typeof(view.getEl()) != "undefined") {
                        if(typeof(view.getEl().dom.childNodes[1].childNodes[0].childNodes[0]) != "undefined"){
                            var selectedRow = view.getEl().dom.childNodes[1].childNodes[0].childNodes[0].childNodes[rowIndex];
                            if (typeof(selectedRow) != "undefined") {
                                if (rowColor != "null") {
                                    selectedRow.style.color = rowColor;
                                }
                            }
                        }
                    }
                }
            }

            Ext.define("Ext.p2.grid.GridView", {
                extend : "Ext.panel.Panel",
                alias : "widget.p2gridview",
                //displayMsg : "{0}-{1} of {2}",
                displayMsg : "{0}-{1} "+'Total'+" {2}",
                emptyMsg : "No data",
                //layout: 'fit',
                rowCount : 0,
                loaddelay : 0,
                allowSort : true,
                scrollable: true,
                // 是否需要自动聚焦功能
                isAutoFocus : false,
                isFirst:true,//fire_add
                showFilter : true,//PIIN-19 
                exportexcel:false,//PII-935
                hideTbar:false,
                showToolTip:false,
                /* 初始化 */
                initComponent : function() {
                    var me=this;
                    var gridContainer=this;
                    /* 定义一个工具条 包含以下按钮刷新、过滤、清除、第一条。。等. */
                    var c = [this.refreshable ? this.refbtn = Ext.create('Ext.Button', {
                                        iconCls : "filter_icon",
                                        tooltip : this.refreshText,
                                        handler : this.refresh,
                                        text : this.refreshText,
                                        scope : this
                                    }) : "", this.refreshable && this.filterable ? 
                                        this.filterbtn = Ext.create('Ext.Button', {
                                        tooltip : this.filterText,
                                        iconCls : 'filter_icon'
                                    }) : "", this.refreshable && this.filterable ? 
                                        this.clearbtn = Ext.create('Ext.Button', {
                                        text : this.clearfilterText,
                                        tooltip : this.clearfilterText,
                                        iconCls : 'nav_icon_clear'
                                    }) : "", this.refreshable ? "-" : "", 
                                        this.first = Ext.create('Ext.Button', {
                                        tooltip : this.firstText,
                                        iconCls : "x-tbar-page-first",
                                        disabled : true,
                                        handler : this.moveFirst,
                                        scope : this
                                    }), this.prev = Ext.create('Ext.Button', {
                                        tooltip : this.prevText,
                                        iconCls : "x-tbar-page-prev",
                                        disabled : true,
                                        handler : this.movePrevious,
                                        scope : this
                                    //}), "-", this.displayItem = new a.TextItem({
                                    }), "-", this.displayItem =Ext.create("Ext.toolbar.TextItem",{
                                        html:Ext.String.format(this.displayMsg, 0, 0, this.rowCount)
                                    }), "-", this.next = Ext.create('Ext.Button', {
                                        tooltip : this.nextText,
                                        iconCls : "x-tbar-page-next",
                                        disabled : true,
                                        handler : this.moveNext,
                                        scope : this
                                    }), this.last = Ext.create('Ext.Button', {
                                        tooltip : this.lastText,
                                        iconCls : "x-tbar-page-last",
                                        disabled : true,
                                        handler : this.moveLast,
                                        scope : this
                                    }), "-", this.exportxls = Ext.create('Ext.Button', {
                                        tooltip : this.exportxlsText,
                                        text : this.exportxlsText,
                                        iconCls : 'nav_icon_exportxls'
                                    })];
                    this.filterbtn.hide();//PIIN-19 
                    //PII-935
                    if(!this.exportexcel){
                        this.exportxls.hide();
                    }else{
                        this.exportxls.show();
                    }

                    if (!this.showFilter) {//PIIN-19
                        this.refbtn.hide();
                        this.clearbtn.hide();
                    }else{
                        this.refbtn.show();
                        this.clearbtn.show();
                    }
                    //end
                    
                    if(!this.hideTbar){
                        /* 如果有工具条了，则把它拼接在一起 */
                        if (this.tbar) {
                            this.tbar = c.concat(this.tbar);
                        } else {
                            this.tbar = c;
                        }
                    }
                    
                    this.height = this.parentHeight;

                    me.callParent();
                    /* 生成一个构造函数，该函数能产生符合规定的Record对象 */
                    this.RowRecordClazz = Ext.data.Model.create(this.store.fields);

                    /* 实例化一个ListView */
                    var gridConfig = {
                        id : this.id + '_view',
                        xtype:'ux-listview',
                        isFirst:this.isFirst,
                        store : this.store,
                        multiSelect : true,
                        reserveScrollOffset : true,
                        columnSort : this.columnSort,
                        columns : this.columns,
                        columnLines:true,//fire_add
                        isDialog:this.isDialog,
                        sortableColumns:false,//fire_add
                        parentWidth : this.parentWidth,
                        //width: this.gridWidth,//extjs5.1不需要设置宽度也可以显示滚动条， 设置了宽度反而会有问题
                        owner : this,
                        currentIndex : 0,
                        scrollable:true,//fire_add
                        forceFit: true,
                        listeners : { 
                            rowclick:function( src, record, tr, rowIndex, e, eOpts){
                                this.currentIndex = rowIndex;
                                Ext.Function.defer(
                                        gridContainer.handleClick,300,this,[this,record.data.row,true]);
                            },
                            rowdblclick:function(src, record, tr, rowIndex, e, eOpts ){
                                this.currentIndex = rowIndex;
                                gridContainer.handleClick(this,record.data.row,false);
                            },
                            //这个事件监听处理器导致grid的column的宽度列变成了百分比，所以导致横向滚动条消息
                            beforerender:function(){
                                var selectCol = this.columns[this.columns.length - 1];
                                var first=1;
                                if ("multichecker" == selectCol.dataIndex) {
                                    var multicheckerBestWidth=40;
                                    var parentWidth = this.parentWidth; 
                                    var last= multicheckerBestWidth/parentWidth;

                                    this.columns[this.columns.length - 1].width = last;
                                  
                                    for(var i=1,j=this.columns.length-1;i<j;i++){
                                        first-=this.columns[i].width;
                                    }
                                    this.columns[0].width = first-last;
                                }else{
                                    for(var i=1,j=this.columns.length;i<j;i++){
                                        first-=this.columns[i].width;
                                    }
                                    this.columns[0].width = first;
                                }
                            },
                            afterrender:function(src){
                                    if(this.owner.showToolTip){
                                        Ext.create('Ext.tip.ToolTip', {
                                            target: this.owner.view.el,
                                            delegate: '.x-grid-cell',
                                            trackMouse: false,
                                            listeners: {
                                                beforeshow: function updateTipBody(tip) {
                                                    var content=tip.triggerElement.innerText.trim();
                                                    content = content.replace("<", "&lt;");
                                                    if(!Ext.isEmpty(content)){
                                                        tip.update(content);
                                                    }else
                                                    {
                                                        return false;
                                                    }
                                                }
                                            }
                                        });
                                    }
                            }
                        }
                    };

                    this.view = Ext.create('Ext.grid.Panel', gridConfig);
                    this.messagePanel=Ext.create('Ext.form.Label');
                    this.add(this.view);
                    this.add(this.messagePanel);
                    this.messagePanel.hide();

                },
                /* 显示消息 */
                showMessage : function(text) {
                    if (Ext.isString(text)){
                        this.messagePanel.show();
                        this.messagePanel.setText(text);
                    }	
                },
                /*
                * 选中操作 打开详细界面时,先发送highlightrow事件,然后展开详细界面. LEGEND-1434
                */
                handleClick : function(view,index,singleClick) {
                    console.log('handleClick event');
                },
                getView : function() {
                    return this.view;
                },
                /* 任务栏展开LIST界面会触发onLayout,此时让过滤器聚焦 */
                onLayout : function() {
                    console.log('onLayout event');
                },

                /* 读取数据 */
                loadData : function(json, fn) {
                    console.log('loadData event');
                    
                    //return;
                    if (json) {
                        this.store.loadData(json.rows, false);
                        if (fn && Ext.isFunction(fn)){
                            fn();
                        }	
                        this.updateInfo(json);
                        refreshRowColor(json, this.view);
                        this.fireEvent("datareload", this, this.store, json);
                    }
                    /* Dialog关闭与打开会触发loadData 此时让其过滤器聚焦 */
                    if (this.isAutoFocus) {
                        this.fireEvent("focusfilter", this);
                    }
                    // 有滚动条时，增加高度
                    if (this.autoScroll) {
                        if (this.view.rendered) {
                            // 表格高度(列标题行及记录行)+100
                            if (Ext.isIE) {
                                this.setHeight(this.view.el.getHeight() + 100);
                            }
                        }
                    }
	
                },
                /* 刷新数据 */
                refreshData : function(json, fn) {
                    console.log('refreshData event');
                },
                /* 事件加载 */
                doLoad : function(params, fn) {
                    console.log('doLoad event');
                },
                updateInfo : function(json) {	
                    if (this.refreshable) {
                        this.refbtn.enable();
                    }
                    if (!json)
                        return;
                    /* 更新提示消息 */
                    if (this.displayItem) {
                        var a = (!json.start || json.start < 0) ? 0 : json.start;
                        var b = (!json.end || json.end < 0) ? 0 : json.end;
                        if (b < 1) {
                            a = 0;
                        }
                        var c = (!json.totalCount || json.totalCount < 0) ? 0 : json.totalCount;
                        this.displayItem.setText(Ext.String.format(this.displayMsg, a, b, c));
                    }
                    this.first.setDisabled(json.atFirstPage);
                    this.prev.setDisabled(json.atFirstPage);
                    this.next.setDisabled(json.atLastPage);
                    this.last.setDisabled(json.atLastPage);
                },
                moveFirst : function() {
                    if (this.allowSort === true) {
                        this.allowSort = false;
                    };
                    this.doLoad({
                                event : "scrollfirst",
                                targetid : this.windowId
                            });
                },
                movePrevious : function() {
                    if (this.allowSort === true) {
                        this.allowSort = false;
                    };
                    this.doLoad({
                                event : "scrollprev",
                                targetid : this.windowId
                            })
                },
                moveNext : function() {
                    if (this.allowSort === true) {
                        this.allowSort = false;
                    };
                    this.doLoad({
                                event : "scrollnext",
                                targetid : this.windowId
                            })
                },
                moveLast : function() {
                    if (this.allowSort === true) {
                        this.allowSort = false;
                    };
                    this.doLoad({
                                event : "scrolllast",
                                targetid : this.windowId
                            })
                },
                refresh : function() {
                    this.doLoad({
                        event : "filterrows",
                        targetid : this.windowId
                    });
                },

                clear : function() {
                    var checkheaderid = this.windowId + '_header_checker';
                    var header_checker = document.getElementById(checkheaderid);
                    if (header_checker && header_checker.className == Ext.p2.grid.CHECKED_CLASS) {
                        header_checker.className = Ext.p2.grid.CHECK_CLASS;
                    }
                    if (this.view.getStore().getCount() > 0) {
                        this.view.getStore().removeAll();
                        this.fireEvent("dataclear", this, this.store);
                    }
                },

                closeDetail : function() {
                    this.fireEvent("closeDetail");
                },
                showDetail : function() {
                    this.fireEvent("showDetail");
                },
                addDetailButtons : function() {
                    this.fireEvent("addButtons");
                },
                removeDetailButtons : function() {
                    this.fireEvent("removeButtons");
                },
                isSelectAll : function() {
                    return this.isSelectAll;
                },
                onDestroy : function() {
                    if(this.items && this.items.length > 0 && Ext.getCmp(this.items[0].id)) {
                        return;
                    }else{
                        this.callParent();
                    }
                },
                listeners:{
                    afterrender:function(){
                        if (this.store && Ext.isObject(this.store.json)) {
                            this.loadData(this.store.json);
                        }
                    }
                }
            });

            Ext.create('Ext.window.Window', {
                id: 'gridWin',
                title: 'Hello',
                height: 500,
                width: 600,
                closeAction: 'hide',
                //scrollable: true,
                layout: 'fit',
                modal : true,
                fbar : ['->',	
                    {
                    windowId : "demo01_button_2",
                    controltype:"button",
                    xtype : "button",
                    text : "关闭",
                    cls:"p2-button",
                    //hidden : true,
                    //id : "demo01_demo01_button_2",
                    disabled : false,
                    handler : function(src) {
                        Ext.Msg.alert('Event Handler', '关闭');  // now alerts 42
                    },
                    tooltip : "关闭"
                    },	
                    {
                    windowId : "demo01_button_3",
                    controltype:"button",
                    xtype : "button",
                    text : "确定",
                    cls:"p2-button",
                    //hidden : true,
                    //id : "demo01_demo01_button_3",
                    disabled : false,
                    handler : function(src) {
                        Ext.Msg.alert('Event Handler', '确定');                         
                    },
                    tooltip : "确定"
                    }
                ],
                items: [
                    /*{
                    elements : 'body',
			        border : true,
                    height: 100,
                    id:"demo01_demo01_section_4_container",
			        bufferResize : true,
                    items : [
                        {
                        	name:"",
                            id : "demo01_demo01_textbox_29",
                            windowId : "demo01_textbox_29",
                            controltype:"textbox",
                            xtype : 'textfield',
                            hasDesc:false,
                            plugins: ['clearbutton'],
                            fieldLabel : "我的名称",			
                            labelSeparator : '',
                            //cls:"",
                            fieldCls:"",
                            editable:true,
                            width:246,
                            labelWidth:100,
                            value : "大耳朵图图",
                            oldvalue : "小耳朵图图",
                            enableKeyEvents :true,
                            selectOnFocus : false,
                            listeners : {
                                render: function(src){
                                    if(src.labelEl){
                                        Ext.create('Ext.tip.ToolTip', {
                                            target: src.labelEl.id,
                                            html: ""
                                        });
                                    }
                                },
                                focus : function(src) {
                                    console.log('focus', src.getRawValue());
                                },
                                select :function(src,date){
                                   console.log('select', src.getRawValue());
                                },
                                blur : function(src) {
                                    console.log('blur', src.getRawValue());
                                },
                                specialkey : function(src, e){
                                    console.log('specialkey', src.getRawValue());
                                }
                            }
                        }
                    ]
                    },*/
                    {
                        
                        id : "demo01_demo01_grid_2",
                        windowId : "demo01_grid_2",
                        appid:'demo01',
                        controltype:"grid",
                        parentid : "demo01_",
                        rowCount : 1,
                        isDialog:true,//fire_add
                        ui:"light",
                        cls:"p2-panel",	
                        title:"p2gridview",
                        collapsible :true,
                        collapsed : false,	
                        xtype : "p2gridview",
                        refreshText :"搜索",
                        filterText:"过滤器",
                        filterable:true,
                        refreshable:true,
                        showFilter:true,
                        exportexcel:false,
                        clearfilterText:"清空搜索",
                        exportxlsText:"导出Excel",
                        firstText:"第一页",
                        prevText:"上一页",
                        nextText:"下一页",
                        lastText:"最后一页",
                        isAutoFocus:true,
                        hideTbar:false,
                        showToolTip:false,
                        tbar : [
                            
                        ],	
                        buttonAlign:'center',	
                        clicksToEdit: 1,
                        columnSort : true,
                        parentWidth: 550.0,
                        parentHeight: 170,
                        gridWidth: 600,
                        isfilter : true,
                        isShowFilter : false,
                        listeners : {
                            scope:this
                        },
                        
                        scope : this,
                        columns: [
                            {
                                dataIndex : "demo01_gridcol_9",
                                sortable :true,
                                menuDisabled : true,
                                width: 0.1,
                                header:"Code"
                            },
                            {
                                dataIndex : "demo01_gridcol_10",
                                sortable :true,
                                menuDisabled : true,
                                width:0.1,
                                header:"Name"
                            },
                            {
                                dataIndex : "demo01_gridcol_11",
                                sortable :true,
                                menuDisabled : true,
                                width:0.1,//0.14285714285714285,
                                header:"Name"
                            },
                            {
                                dataIndex : "demo01_gridcol_12",
                                sortable :true,
                                menuDisabled : true,
                                width:0.2,
                                header:"Name"
                            },
                            {
                                dataIndex : "demo01_gridcol_13",
                                sortable :true,
                                menuDisabled : true,
                                width:0.2,
                                header:"Name"
                            },
                            {
                                dataIndex : "demo01_gridcol_14",
                                sortable :true,
                                menuDisabled : true,
                                width:0.1,
                                header:"Name"
                            },
                            {
                                dataIndex : "demo01_gridcol_15",
                                sortable :true,
                                menuDisabled : true,
                                width:0.1,
                                header:"Last"
                            }
                        ],                 

                        store: new Ext.data.JsonStore({
                                    ownerId : 'demo01_demo01_grid_2',
                                    autoLoadData : true,
                                    root: 'rows',
                                    totalProperty: 'totalCount',
                                    idProperty: 'threadid',	
                                    fields : [
                                        {name:'demo01_gridcol_9'},
                                        {name:'demo01_gridcol_10'},
                                        {name:'demo01_gridcol_11'},
                                        {name:'demo01_gridcol_12'},
                                        {name:'demo01_gridcol_13'},
                                        {name:'demo01_gridcol_14'},
                                        {name:'demo01_gridcol_15'},
                                        'rowStatus',
                                        'toggleSelected',
                                        'sortClassFlag',
                                        'row',
                                        'rowIndex'
                                    ],	

                                    json : 
                                    {
                                        "atFirstPage" : true,
                                        "atLastPage" : true,
                                        "start" : 1,
                                        "end" : 1,
                                        "selectedRowIndex" : 0,
                                        "totalCount":1,
                                        "rows":[
                                        {
                                        "demo01_gridcol_9":"<div onclick=\"console.log('444666')\"><a href='javascript:;'>4444666</a></div>",
                                        "demo01_gridcol_10": "222222333333",
                                        "demo01_gridcol_11":"222222333333",
                                        "demo01_gridcol_12":"222222333333",
                                        "demo01_gridcol_13":"222222333333",
                                        "demo01_gridcol_14":"222222333333",
                                        "demo01_gridcol_15":"222222333333",
                                        "action" : "<div></div>",	
                                        "toggleSelected" : false,
                                        "rowColor":"null",
                                        "rowStatus":2,
                                        "sortClassFlag":0,
                                        "row":0,
                                        "rowIndex":0
                                        }
                                    
                                        ],
                                        "toggleSelectedAll" : false
                                    },
                                    remoteSort: false
                                })
                    }
                    /*,
                    {
                        title: '',
                        width: 600,
                        height: 400,
                        tbar: [
                            { xtype: 'button', text: 'Search' },
                            { xtype: 'button', text: 'Restsearch' }
                        ],
                        items: [
                            {  // Let's put an empty grid in just to illustrate fit layout
                            title: '',
                            xtype: 'grid',
                            border: false,
                            //width: 600,
                            //bodyStyle: 'overflow-x:hidden; overflow-y:hidden',
                            columns: [
                                { text: 'Name', dataIndex: 'name', width:201  },
                                { text: 'Email', dataIndex: 'email', width: 200 },
                                { text: 'Phone', dataIndex: 'phone', width: 200  }
                            ],                 
                            // One header just for show. There's no data,
                            //store: Ext.create('Ext.data.ArrayStore', {}) // A dummy empty data store
                            store: Ext.data.StoreManager.lookup('simpsonsStore')
                            }
                        ]
                    }*/
                    
                ]
            }).show();

         });

         

       
    </script>

</head>
<body>

</body>
</html>
