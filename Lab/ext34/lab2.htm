<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title></title>

    <!--ExtJs框架开始-->
    <link rel="stylesheet" type="text/css" href="/Ext3.4/css/ext-all.css" />
    <script type="text/javascript" src="/Ext3.4/ext-base.js"></script>
    <script type="text/javascript" src="/Ext3.4/ext-all.js"></script>
    <script type="text/javascript" src="/Ext3.4/ext-locale-zh_CN.js"></script>

   <style type="text/css">
   </style>
   <header>
	   <div style="border-style: dashed; border-color: #0000ff; width: 660px; height:60px; align-content: center;">
		实验：显示grid的横向滚动条
		</div>
	</br></br>
   </header>
    <script type="text/javascript">
        Ext.onReady(function(){

            var ListView = Ext.extend(Ext.list.ListView, {
                onMouseOver : function() {
                },
                onMouseOut : function() {
                },
                initComponent : function() {
                    this.tpl = new Ext.XTemplate('<tpl for="rows">',
                            '<dl rowStatus="{rowStatus}" sortClassFlag="{sortClassFlag}"',
                            '<tpl if="rowStatus==5"> style="background-color:#E0E0E0;"</tpl>',
                            '<tpl elseif="sortClassFlag==1"> style="background-color:#D9E8FB;"</tpl>',
                            '<tpl elseif="rowStatus==4"> style="background-color:#FDFDDF"</tpl>',
                            '<tpl elseif="rowStatus==3"> style="background-color:#c7e5ff"</tpl>', '>',
                            '<tpl for="parent.columns">', '<dt style="width:{[values.width*100]}%;text-align:{align};">',
                            '<em unselectable="on"  class="grid-cell <tpl if="cls">{cls}</tpl>">', '{[values.tpl.apply(parent)]}',
                            '</em></dt>', '</tpl>', '<div class="x-clear"></div>', '</dl>', '</tpl>');
                    ListView.superclass.initComponent.call(this)
                }
            });
            Ext.reg("ux-listview", ListView);

            GridView = Ext.extend(Ext.Panel, {
			//displayMsg : "{0}-{1} of {2}",
			displayMsg:"{0}-{1} "+'Total'+" {2}",
			emptyMsg : "No data",
			layout : 'form',
			rowCount : 0,
			loaddelay : 0,
			allowSort : true,
			showFilter : true,//PIIN-19 ellen
			exportexcel:false,//PII-935
			// 是否需要自动聚焦功能
			isAutoFocus : false,
			hideTbar:false,
			showToolTip:false,
			autoScroll: true,
			/* 初始化 */
			initComponent : function() {
				var a = Ext.Toolbar;
				/* 定义一个工具条 包含以下按钮刷新、过滤、清除、第一条。。等. */
				var c = [this.refreshable ? this.refbtn = new a.Button({
									iconCls : "filter_icon",
									tooltip : this.refreshText,
									handler : this.refresh,
									text : this.refreshText,
									scope : this
								}) : "", this.refreshable && this.filterable ? this.filterbtn = new a.Button({
									tooltip : this.filterText,
									iconCls : 'filter_icon'
								}) : "", this.refreshable && this.filterable ? this.clearbtn = new a.Button({
									text : this.clearfilterText,
									tooltip : this.clearfilterText,
									iconCls : 'nav_icon_clear'
								}) : "", this.refreshable ? "-" : "", this.first = new a.Button({
									tooltip : this.firstText,
									iconCls : "x-tbar-page-first",
									disabled : true,
									handler : this.moveFirst,
									scope : this
								}), this.prev = new a.Button({
									tooltip : this.prevText,
									iconCls : "x-tbar-page-prev",
									disabled : true,
									handler : this.movePrevious,
									scope : this
								}), "-", this.displayItem = new a.TextItem({
									text : String.format(this.displayMsg, 0, 0, this.rowCount)
								}), "-", this.next = new a.Button({
									tooltip : this.nextText,
									iconCls : "x-tbar-page-next",
									disabled : true,
									handler : this.moveNext,
									scope : this
								}), this.last = new a.Button({
									tooltip : this.lastText,
									iconCls : "x-tbar-page-last",
									disabled : true,
									handler : this.moveLast,
									scope : this
								}), "-", this.exportxls = new a.Button({
									tooltip : this.exportxlsText,
									text : this.exportxlsText,
									iconCls : 'nav_icon_exportxls'
								})];
				this.filterbtn.hide();//PIIN-19 ellen
				//PII-935
				if(!this.exportexcel){
					this.exportxls.hide();
				}else{
					this.exportxls.show();
				}
				if (!this.showFilter) {//PIIN-19 ellen
					this.refbtn.hide();
					this.clearbtn.hide();
				}else{
					this.refbtn.show();
					this.clearbtn.show();
				}
				//end
				if(!this.hideTbar){
					/* 如果有工具条了，则把它拼接在一起 */
					if (this.tbar) {
						this.tbar = c.concat(this.tbar);
					} else {
						this.tbar = c;
					}
				}
				
				
				if(this.isSetGridColWidth){
					this.setAutoScroll(true);
				}
				
				GridView.superclass.initComponent.call(this);

				/* 预留代码位置 */
				if (!Ext.isObject(this.store)) {
					if (!Ext.isArray(this.columns)) {
					}
				}
				/* 生成一个构造函数，该函数能产生符合规定的Record对象 */
				this.RowRecordClazz = Ext.data.Record.create(this.store.fields);
				/* 实例化一个ListView */
				var gridConfig = {
					id : this.id + '_view',
					store : this.store,
					multiSelect : true,
					reserveScrollOffset : true,
					columnSort : this.columnSort,
					columns : this.columns,
					parentWidth:this.parentWidth,
					isSetGridColWidth: this.isSetGridColWidth,
					owner : this,
					currentIndex : 0,
					listeners : {
						/*
						 * 当行记录被单击时执行选中操作
						 * 这样是为了保证handleSelect函数里的作用域（即handleSelect里的代码）
						 * 和调用handleSelect函数（即handler所在的代码，调用方）的作用域是一致的，
						 * 这样可以在handleSelect函数里使用调用方定义的一些函数和属性（在用this关键字时）.
						 */
						click : function(src, index, node, e) {
							// LEGEND-1434
							this.currentIndex = index;
							src.owner.handleClick.defer(300, this, [src.owner, index, node, e, true]);
						},
						dblclick : function(src, index, node, e) {
							// LEGEND-1434
							this.currentIndex = index;
							src.owner.handleClick(src.owner, index, node, e, false);
						},
						beforerender : function(src) {
							//if(this.isSetGridColWidth) return;
							//src.resizeSelectCol();
						},
						afterrender : function(src) {
							// 有滚动条时，增加高度
							if (src.owner.autoScroll) {
								if (Ext.isIE) {
									console.log('IE resizeHeight to add 50px')
									src.owner.setHeight(src.owner.getHeight() + 50);
								}
							}
							//refreshRowColor(src.store.json, src);
							src.store.json = null;
							
							if(this.owner.showToolTip){
								this.owner.toolTip=new Ext.ToolTip({
									target: this.owner.view.el,
								    delegate: '.grid-cell',
								    trackMouse: false,
								    //html:'tip',
								    //renderTo:this,
								    listeners: {
								        beforeshow: function updateTipBody(tip) {
								        	var content=tip.triggerElement.innerText.trim();
								        	content = content.replace("<", "&lt;");
								        	if(!Ext.isEmpty(content)){
								        		if(tip.rendered){
								        			tip.update(content);
								        		}
								        		else{
								        			tip.html=content;
								        		}
								        		//return true;
								        	}else
							        		{
								        		return false;
							        		}
								        }
								    }
								});
							}
						}
					},
					resizeSelectCol : function() {
						// 动态设置选择列的宽度
						var selectCol = this.columns[this.columns.length - 1];
						// 如果是选择列
						if ("multichecker" == selectCol.dataIndex) {
							//复选框宽度为40像素点时效果最好，宽度默认比例为:0.04
							var multicheckerBestWidth=40;
							//0.04
							var cW = selectCol.width;
							//表格宽度
							var parentWidth = this.parentWidth;
							var first = this.columns[0].width;
							this.columns[this.columns.length - 1].width = multicheckerBestWidth/parentWidth;
							this.columns[0].width = first+(cW-multicheckerBestWidth/parentWidth);
						}
					}
				};
				if (this.gridWidth) {
					console.log('gridWidth', this.gridWidth);
					Ext.apply(gridConfig, {
								width : this.gridWidth
							});
				}
				this.view = new ListView(gridConfig);
				this.add(this.view);

				/* 当显示完后读取数据 */
				this.on("afterrender", function() {
							/* 实例化一个消息面板 */
							this.messagePanel = new Ext.form.Label({
										html : ''
									});
							this.messagePanel.render(this.bwrap);

							if (this.store && Ext.isObject(this.store.json)) {
								this.loadData(this.store.json);
							}
						}, this);
			},
			/* 显示消息 */
			showMessage : function(text) {
				if (Ext.isString(text))
					this.messagePanel.el.dom.innerHTML = text;
			},
			/*
			 * 选中操作 打开详细界面时,先发送highlightrow事件,然后展开详细界面. LEGEND-1434
			 */
			handleClick : function(src, index, node, e, singleClick) {
				var view = src.getView();
				console.log('handleClick', index);

			},
			getView : function() {
				return this.view;
			},
			/* 任务栏展开LIST界面会触发onLayout,此时让过滤器聚焦 */
			onLayout : function() {
				GridView.superclass.onLayout.call(this);
				if (this.isAutoFocus) {
					this.fireEvent("focusfilter", this);
				}
			},

			/* 读取数据 */
			loadData : function(json, fn) {
				if (json) {
					this.view.saveJson=json;//PII-916
					this.store.loadData(json, false);
					if (fn && Ext.isFunction(fn))
						fn();
					this.updateInfo(json);
					//refreshRowColor(json,this.view);
					this.fireEvent("datareload", this, this.store, json);
				};
				/* Dialog关闭与打开会触发loadData 此时让其过滤器聚焦 */
				if (this.isAutoFocus) {
					this.fireEvent("focusfilter", this);
				}
				// 有滚动条时，增加高度
				if (this.autoScroll) {
					if (this.view.rendered) {
						// 表格高度(列标题行及记录行)+100
						if (Ext.isIE) {
                            console.log('IE resize height');
							this.setHeight(this.view.el.getHeight() + 100);
						}
					}
				}

			},
			/* 刷新数据 */
			refreshData : function(json, fn) {
				if (json && this.RowRecordClazz && json.rows) {
					var len = json["end"] - json["start"] + 1;
					/* 循环替换数据 */
					for (var i = 0; i < len; i++) {
						var rowData = json.rows[i];
						var rowIndex = rowData["rowIndex"];
						var rowColor = rowData["rowColor"];
						var record = this.store.getAt(rowIndex);
						/* isRowReset判断此条数据是否被重置过 */
						if (rowIndex >= 0 && rowIndex == json["selectedRowIndex"]) {
							var newRecord = new this.RowRecordClazz(rowData);
							this.view.getStore().removeAt(rowIndex);
							this.view.getStore().insert(rowIndex, newRecord);
						}
						//PII-877
						this.view.getStore().getAt(i).set("rowStatus",rowData.rowStatus);
					    //end
						if (typeof(this.view.getEl()) != "undefined") {
							var selectedRow = this.view.getEl().dom.childNodes[1].firstChild.childNodes[rowIndex];
							if (typeof(selectedRow) != "undefined") {
								if (rowColor != "null") {
									selectedRow.style.color = rowColor;
								}
							}
						}
					}
				}

				if (fn && Ext.isFunction(fn))
					fn();
				this.fireEvent("datachanged", this, this.store, json);
			},
			/* 事件加载 */
			doLoad : function(params, fn) {
				console.log('doLoad', params);
			},
			updateInfo : function(json) {
				if (this.refreshable) {
					this.refbtn.enable();
				}
				if (!json)
					return;
				/* 更新提示消息 */
				if (this.displayItem) {
					var a = (!json.start || json.start < 0) ? 0 : json.start;
					var b = (!json.end || json.end < 0) ? 0 : json.end;
					if (b < 1) {
						a = 0;
					}
					var c = (!json.totalCount || json.totalCount < 0) ? 0 : json.totalCount;
					this.displayItem.setText(String.format(this.displayMsg, a, b, c));
				}
				this.first.setDisabled(json.atFirstPage);
				this.prev.setDisabled(json.atFirstPage);
				this.next.setDisabled(json.atLastPage);
				this.last.setDisabled(json.atLastPage);
			},
			moveFirst : function() {
				if (this.allowSort === true) {
					this.allowSort = false;
				};
				this.doLoad({
							event : "scrollfirst",
							targetid : this.windowId
						});
			},
			movePrevious : function() {
				if (this.allowSort === true) {
					this.allowSort = false;
				};
				this.doLoad({
							event : "scrollprev",
							targetid : this.windowId
						})
			},
			moveNext : function() {
				if (this.allowSort === true) {
					this.allowSort = false;
				};
				this.doLoad({
							event : "scrollnext",
							targetid : this.windowId
						})
			},
			moveLast : function() {
				if (this.allowSort === true) {
					this.allowSort = false;
				};
				this.doLoad({
							event : "scrolllast",
							targetid : this.windowId
						})
			},
			refresh : function() {
				if (this.parentid != null && this.parentid != this.id
						&& typeof(Ext.getCmp(this.parentid)) != "undefined") {
					this.loaddelay = Ext.getCmp(this.parentid).loaddelay + 150;
					setTimeout(this.doLoad.createDelegate(this, [{
												event : 'filterrows',
												targetid : this.windowId
											}]), this.loaddelay);
				} else {
					this.doLoad({
								event : "filterrows",
								targetid : this.windowId
							});
				}
			},

			/* 状态还原为初始状态，并移除当前Store里的数据 */
			clear : function() {
				console.log('clear');
			},

			/* 用来发送closeDetail事件 触动roweditor执行相应操作 */
			closeDetail : function() {
				this.fireEvent("closeDetail");
			},
			showDetail : function() {
				this.fireEvent("showDetail");
			},
			/* 添加按钮 PII-1490*/
			addDetailButtons : function() {
				this.fireEvent("addButtons");
			},
			/* 移除按钮 PII-1490 */
			removeDetailButtons : function() {
				this.fireEvent("removeButtons");
			},
			isSelectAll : function() {
				return this.isSelectAll;
			},

			/* 注销按钮 */
			onDestroy : function() {
				Ext.destroy(this.refbtn, this.filterbtn, this.clearbtn, this.exportxls, this.first, this.prev,
						this.displayItem, this.next, this.last, this.view);
				this.refbtn = null;
				this.filterbtn = null;
				this.clearbtn = null;
				this.exportxls = null;
				this.first = null;
				this.prev = null;
				this.displayItem = null;
				this.next = null;
				this.last = null;
				this.view = null;
				Ext.Panel.superclass.onDestroy.call(this);
			}
		});
        Ext.reg('gridview', GridView);


        new Ext.Panel({
            title: 'Message Title',
            renderTo: 'gridview-container',
			width: 425, 
			height: 330,
			autoScroll: true,
            items: [
                {
                    id : "designer_CONDITION_lookupdef",
                    windowId : "CONDITION_lookupdef",
                    appid:'designer',
                    controltype:"grid",
                    parentid : "designer_",
                    rowCount : 2,
                    title:"",
                    collapsible :false,
                    collapsed : false,	
                    xtype : "gridview",
                    refreshText :"搜索",
                    filterText:"过滤器",
                    filterable:true,
                    refreshable:true,
                    showFilter:true,
                    exportexcel:false,
                    clearfilterText:"清空搜索",
                    exportxlsText:"导出Excel",
                    firstText:"第一页",
                    prevText:"上一页",
                    nextText:"下一页",
                    lastText:"最后一页",
                    isAutoFocus:true,
                    hideTbar:false,
                    showToolTip:false,
                    
                    tbar : [
                    ],
                    
                    buttonAlign:'center',	
                    clicksToEdit: 1,
                    columnSort : true,
                
                    parentWidth:200.0,
					isSetGridColWidth:false,
					gridWidth: 625,
                    columns: [
                    {
                        dataIndex : "CONDITION_col0",
						sortable :true,
						width: 0.1,
                        header:"条件名称"
                    }
                        ,
                    {
                        dataIndex : "CONDITION_col1",
                        sortable :true,
                        width: 0.45454545454545453,
                        header:"描述"
                    }
                        ,
                    {
                        dataIndex : "CONDITION_col2",
                        sortable :true,
                        width: 0.09090909090909091,
                        header:"类型"
                    }
                        ,
                    {
                        dataIndex : "CONDITION_col3",
                        sortable :true,
                        width: 0.11363636363636363,
                        header:"物件名称"
                    }
                        ,
                    {
                        dataIndex : "CONDITION_col4",
                        sortable :true,
                        width: 0.22727272727272727,
                        header:"栏位名称"
                    }
                    ],                 

                    store: new Ext.data.JsonStore({
                        //ownerId : 'designer_CONDITION_lookupdef',
                        autoLoadData : true,
                        root: 'rows',
                        totalProperty: 'totalCount',
                        idProperty: 'threadid',	
                        fields : [
                        {name:'CONDITION_col0'},
                        {name:'CONDITION_col1'},
                        {name:'CONDITION_col2'},
                        {name:'CONDITION_col3'},
                        {name:'CONDITION_col4'},
                            'rowStatus',
                            'toggleSelected',
                            'sortClassFlag',
                            'row',
                            'rowIndex'
                        ],	

                                json : 
                                {
                                    "atFirstPage" : true,
                                    "atLastPage" : true,
                                    "start" : 1,
                                    "end" : 2,
                                    "selectedRowIndex" : 0,
                                    "totalCount":2,
                                    "rows":[
                                    {
                                    "CONDITION_col0":"<div onclick=\"console.log({event:'selectrecord',appid:'designer',row:0,targetid:'CONDITION_lookupdef',value:\&quot;true\&quot;})\"><a href='#'>USER_IS_SUPERVISOR</a></div>",
                                    "CONDITION_col1":"<div onclick=\"console.log({event:'selectrecord',appid:'designer',row:0,targetid:'CONDITION_lookupdef',value:\&quot;true\&quot;})\"><a href='#'>The user is supervisor of the current record.</a></div>",
                                    "CONDITION_col2":"<div onclick=\"console.log({event:'selectrecord',appid:'designer',row:0,targetid:'CONDITION_lookupdef',value:\&quot;true\&quot;})\"><a href='#'>BEANFIELD</a></div>",
                                    "CONDITION_col3":"<div onclick=\"console.log({event:'selectrecord',appid:'designer',row:0,targetid:'CONDITION_lookupdef',value:\&quot;true\&quot;})\"><a href='#'>Fuck</a></div>",
                                    "CONDITION_col4":"<div onclick=\"console.log({event:'selectrecord',appid:'designer',row:0,targetid:'CONDITION_lookupdef',value:\&quot;true\&quot;})\"><a href='#'>SUPERVISOR</a></div>",
                                    "action" : "<div></div>",
                                    "toggleSelected" : false,
                                    "rowColor":"null",
                                    "rowStatus":2,
                                    "sortClassFlag":0,
                                    "row":0,
                                    "rowIndex":0
                                    }
                                    ,
                                    {
                                    "CONDITION_col0":"<div onclick=\"console.log({event:'selectrecord',appid:'designer',row:1,targetid:'CONDITION_lookupdef',value:\&quot;true\&quot;})\"><a href='#'>USER_IS_CREATOR</a></div>",
                                    "CONDITION_col1":"<div onclick=\"console.log({event:'selectrecord',appid:'designer',row:1,targetid:'CONDITION_lookupdef',value:\&quot;true\&quot;})\"><a href='#'>The user is the creator of the current record.</a></div>",
                                    "CONDITION_col2":"<div onclick=\"console.log({event:'selectrecord',appid:'designer',row:1,targetid:'CONDITION_lookupdef',value:\&quot;true\&quot;})\"><a href='#'>BEANFIELD</a></div>",
                                    "CONDITION_col3":"<div onclick=\"console.log({event:'selectrecord',appid:'designer',row:1,targetid:'CONDITION_lookupdef',value:\&quot;true\&quot;})\"><a href='#'>CaCa</a></div>",
                                    "CONDITION_col4":"<div onclick=\"console.log({event:'selectrecord',appid:'designer',row:1,targetid:'CONDITION_lookupdef',value:\&quot;true\&quot;})\"><a href='#'>CREATEBY</a></div>",
                                    "action" : "<div></div>",
                                    "toggleSelected" : false,
                                    "rowColor":"null",
                                    "rowStatus":2,
                                    "sortClassFlag":0,
                                    "row":1,
                                    "rowIndex":1
                                    }
                                
                                    ],
                                    "toggleSelectedAll" : false
                                },
                                remoteSort: false
                            })
                    
                }
            ],
            footerCfg: {
                tag: 'marquee',
                cls: 'x-panel-footer',        // same as the Default class
                html: 'Fucccccc......'
            },
            footerCssClass: 'custom-footer', // additional css class, see {@link Ext.element#addClass addClass}
            footerStyle:    'background-color:#C8303D' //#CEBDB5 see {@link #bodyStyle}
		});
		

		
		var data = {
			"images":[
				{
					"name":"dance_fever.jpg",
					"size":2067,
					"lastmod":1236974993000,
					"url":"images\/thumbs\/dance_fever.jpg"
				},
				{
					"name":"zack_sink.jpg",
					"size":2303,
					"lastmod":1236974993000,
					"url":"images\/thumbs\/zack_sink.jpg"
				}
			]
		}
		var store = new Ext.data.JsonStore({
			url: 'get-images.php',
			root: 'images',
			fields: [
				'name', 'url',
				{name:'size', type: 'float'},
				{name:'lastmod', type:'date', dateFormat:'timestamp'}
			]
		});

		store.loadData(data);

		var listView = new Ext.list.ListView({
			store: store,
			multiSelect: true,
			emptyText: 'No images to display',
			reserveScrollOffset: true,
			width: 423,
			//autoScroll: true,
			columns: [{
				header: 'File',
				width: .15,
				dataIndex: 'name'
			},{
				header: 'Last Modified',
				width: .35,
				dataIndex: 'lastmod',
				tpl: '{lastmod:date("m-d h:i a")}'
			},{
				header: 'Size',
				dataIndex: 'size',
				tpl: '{size:fileSize}', // format using Ext.util.Format.fileSize()
				align: 'right'
			}]
		});

		// put it in a Panel so it looks pretty
		var panel = new Ext.Panel({
			id:'images-view',
			width:425,
			height:250,
			collapsible:true,
			layout:'form',
			autoScroll: true,
			title:'Simple ListView (0 items selected)',
			items: listView
		});
		panel.render('grid-container');

		// little bit of feedback
		listView.on('selectionchange', function(view, nodes){
			var l = nodes.length;
			var s = l != 1 ? 's' : '';
			panel.setTitle('Simple ListView ('+l+' item'+s+' selected)');
		});
				
			


         });

         

       
    </script>

</head>
<body>
	<div id='gridview-container' style='margin-left:25%;'></div>
	<div id='grid-container' style='margin-left:25%;margin-top: 20px;'></div>
</body>
</html>
